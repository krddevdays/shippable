jobs:
  - name: backend_build_and_push
    type: runSh
    steps:
      - IN: backend_gitRepo
        showBuildStatus: true
      - IN: docker_registry_config
        switch: off
      - TASK:
          script:
            - IMAGE_TAG=$(echo $BACKEND_GITREPO_COMMIT | cut -c 1-5) && echo $IMAGE_TAG
            - IMAGE_NAME=$(shipctl get_resource_version_key "backend_image" "sourceName") && echo $IMAGE_NAME
            - pushd $(shipctl get_resource_state backend_gitRepo)
            - docker build -t "$IMAGE_NAME:$IMAGE_TAG" .
            - docker push "$IMAGE_NAME:$IMAGE_TAG"
            - |
              if [ "$BACKEND_GITREPO_IS_PULL_REQUEST" == false ] && [ "$BACKEND_GITREPO_BRANCH" == "master" ]; then
                echo "Update backend_image"
                shipctl post_resource_state "backend_image" "versionName" "$IMAGE_TAG"
                exit 0
              else
                echo "Dont't update backend_image"
                echo "$BACKEND_GITREPO_IS_PULL_REQUEST != false || $BACKEND_GITREPO_BRANCH != master"
              fi;
      - OUT: backend_image

  - name: frontend_build_and_push
    type: runSh
    steps:
      - IN: frontend_gitRepo
        showBuildStatus: true
      - IN: docker_registry_config
        switch: off
      - TASK:
          runtime:
            container: false
          script:
            - IMAGE_TAG=$(echo $FRONTEND_GITREPO_COMMIT | cut -c 1-5) && echo $IMAGE_TAG
            - IMAGE_NAME=$(shipctl get_resource_version_key "frontend_image" "sourceName") && echo $IMAGE_NAME
            - pushd $(shipctl get_resource_state frontend_gitRepo)
            - docker build -t "$IMAGE_NAME:$IMAGE_TAG" .
            - docker push "$IMAGE_NAME:$IMAGE_TAG"
            - |
              if [ "$FRONTEND_GITREPO_IS_PULL_REQUEST" == false ] && [ "$FRONTEND_GITREPO_BRANCH" == "master" ]; then
                echo "Update frontend_image"
                shipctl post_resource_state "frontend_image" "versionName" "$IMAGE_TAG"
                exit 0
              else
                echo "Dont't update frontend_image"
                echo "$FRONTEND_GITREPO_IS_PULL_REQUEST != false || $FRONTEND_GITREPO_BRANCH != master"
              fi;
      - OUT: frontend_image

  - name: terraform
    type: runSh
    steps:
      - IN: infrastructure_masterRepo
      - IN: frontend_image
      - IN: backend_image
      - IN: dnsimple_env
        switch: off
      - IN: s3_env
        switch: off
      - IN: yandex_env
        switch: off
      - IN: db_env
        switch: off
      - IN: backend_secret_key_env
        switch: off
      - IN: docker_swarm_ssh
        switch: off
      - IN: dhparams
        switch: off
      - IN: qtickets_env
        switch: off
      - IN: backend_sentry_env
        switch: off
      - IN: frontend_sentry_env
      - TASK:
          script:
            - pushd $(shipctl get_resource_state "infrastructure_masterRepo")/terraform
            - terraform init
            - |
              terraform plan -out=terraform.plan \
                -var "docker_swarm_ssh_key_public=$DOCKER_SWARM_SSH_PUBLIC_KEY_PATH" \
                -var "docker_swarm_ssh_key_private=$DOCKER_SWARM_SSH_PRIVATE_KEY_PATH" \
                -var "domain=krd.dev" \
                -var "frontend_image_name=$FRONTEND_IMAGE_SOURCENAME" \
                -var "frontend_image_version=$FRONTEND_IMAGE_VERSIONNAME" \
                -var "backend_image_name=$BACKEND_IMAGE_SOURCENAME" \
                -var "backend_image_version=$BACKEND_IMAGE_VERSIONNAME" \
                -var "backend_secret_key=$BACKEND_SECRET_KEY" \
                -var "backend_db_name=$DB_NAME" \
                -var "backend_db_user=$DB_USER" \
                -var "backend_db_password=$DB_PASSWORD" \
                -var "backend_sentry_dsn=$BACKEND_SENTRY_DSN" \
                -var "frontend_sentry_dsn=$FRONTEND_SENTRY_DSN" \
                -var "frontend_sentry_token=$FRONTEND_SENTRY_TOKEN" \
                -var "db_host=$DB_HOST" \
                -var "db_port=$DB_PORT" \
                -var "certbot_email=help@krddevdays.ru" \
                -var "dhparams=$DHPARAMS_KEYPATH" \
                -var "qtickets_endpoint=$QTICKETS_ENDPOINT" \
                -var "qtickets_token=$QTICKETS_TOKEN" \
                -var "qtickets_secret=$QTICKETS_SECRET" \
            - terraform apply -auto-approve terraform.plan
            - popd
